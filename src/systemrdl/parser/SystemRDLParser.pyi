from antlr4 import *
from _typeshed import Incomplete
from io import StringIO as StringIO
from typing import TextIO

def serializedATN(): ...

class SystemRDLParser(Parser):
    grammarFileName: str
    atn: Incomplete
    decisionsToDFA: Incomplete
    sharedContextCache: Incomplete
    literalNames: Incomplete
    symbolicNames: Incomplete
    RULE_root: int
    RULE_eval_expr_root: int
    RULE_root_elem: int
    RULE_component_def: int
    RULE_explicit_component_inst: int
    RULE_component_inst_alias: int
    RULE_component_named_def: int
    RULE_component_anon_def: int
    RULE_component_body: int
    RULE_component_body_elem: int
    RULE_component_insts: int
    RULE_component_inst: int
    RULE_field_inst_reset: int
    RULE_inst_addr_fixed: int
    RULE_inst_addr_stride: int
    RULE_inst_addr_align: int
    RULE_component_inst_type: int
    RULE_component_type: int
    RULE_component_type_primary: int
    RULE_param_def: int
    RULE_param_def_elem: int
    RULE_param_inst: int
    RULE_param_assignment: int
    RULE_expr: int
    RULE_expr_primary: int
    RULE_concatenate: int
    RULE_replicate: int
    RULE_paren_expr: int
    RULE_cast: int
    RULE_cast_width_expr: int
    RULE_range_suffix: int
    RULE_array_suffix: int
    RULE_array_type_suffix: int
    RULE_data_type: int
    RULE_basic_data_type: int
    RULE_literal: int
    RULE_number: int
    RULE_string_literal: int
    RULE_boolean_literal: int
    RULE_array_literal: int
    RULE_struct_literal: int
    RULE_struct_kv: int
    RULE_enum_literal: int
    RULE_accesstype_literal: int
    RULE_onreadtype_literal: int
    RULE_onwritetype_literal: int
    RULE_addressingtype_literal: int
    RULE_precedencetype_literal: int
    RULE_instance_ref: int
    RULE_instance_ref_element: int
    RULE_prop_ref: int
    RULE_local_property_assignment: int
    RULE_dynamic_property_assignment: int
    RULE_normal_prop_assign: int
    RULE_encode_prop_assign: int
    RULE_prop_mod_assign: int
    RULE_prop_assignment_rhs: int
    RULE_prop_keyword: int
    RULE_prop_mod: int
    RULE_udp_def: int
    RULE_udp_attr: int
    RULE_udp_type: int
    RULE_udp_data_type: int
    RULE_udp_usage: int
    RULE_udp_comp_type: int
    RULE_udp_default: int
    RULE_udp_constraint: int
    RULE_enum_def: int
    RULE_enum_entry: int
    RULE_enum_prop_assign: int
    RULE_struct_def: int
    RULE_struct_elem: int
    RULE_struct_type: int
    RULE_constraint_def: int
    RULE_constraint_named_def: int
    RULE_constraint_anon_def: int
    RULE_constraint_body: int
    RULE_constraint_body_elem: int
    RULE_constraint_insts: int
    RULE_constr_relational: int
    RULE_constr_prop_assign: int
    RULE_constr_inside_values: int
    RULE_constr_inside_enum: int
    RULE_constr_lhs: int
    RULE_constr_inside_value: int
    ruleNames: Incomplete
    EOF: Incomplete
    T__0: int
    T__1: int
    T__2: int
    T__3: int
    T__4: int
    T__5: int
    T__6: int
    T__7: int
    T__8: int
    T__9: int
    T__10: int
    T__11: int
    T__12: int
    T__13: int
    T__14: int
    SL_COMMENT: int
    ML_COMMENT: int
    BOOLEAN_kw: int
    BIT_kw: int
    LONGINT_kw: int
    UNSIGNED_kw: int
    STRING_kw: int
    ACCESSTYPE_kw: int
    ADDRESSINGTYPE_kw: int
    ONREADTYPE_kw: int
    ONWRITETYPE_kw: int
    ALIAS_kw: int
    EXTERNAL_kw: int
    INTERNAL_kw: int
    ADDRMAP_kw: int
    REGFILE_kw: int
    REG_kw: int
    FIELD_kw: int
    MEM_kw: int
    SIGNAL_kw: int
    TRUE_kw: int
    FALSE_kw: int
    NA_kw: int
    RW_kw: int
    WR_kw: int
    R_kw: int
    W_kw: int
    RW1_kw: int
    W1_kw: int
    RCLR_kw: int
    RSET_kw: int
    RUSER_kw: int
    WOSET_kw: int
    WOCLR_kw: int
    WOT_kw: int
    WZS_kw: int
    WZC_kw: int
    WZT_kw: int
    WCLR_kw: int
    WSET_kw: int
    WUSER_kw: int
    COMPACT_kw: int
    REGALIGN_kw: int
    FULLALIGN_kw: int
    HW_kw: int
    SW_kw: int
    POSEDGE_kw: int
    NEGEDGE_kw: int
    BOTHEDGE_kw: int
    LEVEL_kw: int
    NONSTICKY_kw: int
    ABSTRACT_kw: int
    ALL_kw: int
    COMPONENT_kw: int
    COMPONENTWIDTH_kw: int
    CONSTRAINT_kw: int
    DEFAULT_kw: int
    ENUM_kw: int
    ENCODE_kw: int
    INSIDE_kw: int
    NUMBER_kw: int
    PROPERTY_kw: int
    REF_kw: int
    STRUCT_kw: int
    THIS_kw: int
    TYPE_kw: int
    ALTERNATE_kw: int
    BYTE_kw: int
    INT_kw: int
    PRECEDENCETYPE_kw: int
    REAL_kw: int
    SHORTINT_kw: int
    SHORTREAL_kw: int
    SIGNED_kw: int
    WITH_kw: int
    WITHIN_kw: int
    INT: int
    HEX_INT: int
    VLOG_INT: int
    STRING: int
    PLUS: int
    MINUS: int
    BNOT: int
    NOT: int
    BAND: int
    NAND: int
    AND: int
    OR: int
    BOR: int
    NOR: int
    XOR: int
    XNOR: int
    LSHIFT: int
    RSHIFT: int
    MULT: int
    EXP: int
    DIV: int
    MOD: int
    EQ: int
    ASSIGN: int
    NEQ: int
    LEQ: int
    LT: int
    GEQ: int
    GT: int
    AT: int
    INC: int
    ALIGN: int
    WS: int
    ID: int
    def __init__(self, input: TokenStream, output: TextIO = ...) -> None: ...
    class RootContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def EOF(self): ...
        def root_elem(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    state: int
    def root(self): ...
    class Eval_expr_rootContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def expr(self): ...
        def EOF(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def eval_expr_root(self): ...
    class Root_elemContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def component_def(self): ...
        def enum_def(self): ...
        def udp_def(self): ...
        def struct_def(self): ...
        def constraint_def(self): ...
        def explicit_component_inst(self): ...
        def local_property_assignment(self): ...
        def dynamic_property_assignment(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def root_elem(self): ...
    class Component_defContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def component_named_def(self): ...
        def component_inst_type(self): ...
        def component_insts(self): ...
        def component_anon_def(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def component_def(self): ...
    class Explicit_component_instContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ID(self): ...
        def component_insts(self): ...
        def component_inst_type(self): ...
        def component_inst_alias(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def explicit_component_inst(self): ...
    class Component_inst_aliasContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ALIAS_kw(self): ...
        def ID(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def component_inst_alias(self): ...
    class Component_named_defContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def component_type(self): ...
        def ID(self): ...
        def component_body(self): ...
        def param_def(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def component_named_def(self): ...
    class Component_anon_defContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def component_type(self): ...
        def component_body(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def component_anon_def(self): ...
    class Component_bodyContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def component_body_elem(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def component_body(self): ...
    class Component_body_elemContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def component_def(self): ...
        def enum_def(self): ...
        def struct_def(self): ...
        def constraint_def(self): ...
        def explicit_component_inst(self): ...
        def local_property_assignment(self): ...
        def dynamic_property_assignment(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def component_body_elem(self): ...
    class Component_instsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def component_inst(self, i: int = ...): ...
        def param_inst(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def component_insts(self): ...
    class Component_instContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ID(self): ...
        def range_suffix(self): ...
        def field_inst_reset(self): ...
        def inst_addr_fixed(self): ...
        def inst_addr_stride(self): ...
        def inst_addr_align(self): ...
        def array_suffix(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def component_inst(self): ...
    class Field_inst_resetContext(ParserRuleContext):
        parser: Incomplete
        op: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def expr(self): ...
        def ASSIGN(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def field_inst_reset(self): ...
    class Inst_addr_fixedContext(ParserRuleContext):
        parser: Incomplete
        op: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def expr(self): ...
        def AT(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def inst_addr_fixed(self): ...
    class Inst_addr_strideContext(ParserRuleContext):
        parser: Incomplete
        op: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def expr(self): ...
        def INC(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def inst_addr_stride(self): ...
    class Inst_addr_alignContext(ParserRuleContext):
        parser: Incomplete
        op: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def expr(self): ...
        def ALIGN(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def inst_addr_align(self): ...
    class Component_inst_typeContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def EXTERNAL_kw(self): ...
        def INTERNAL_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def component_inst_type(self): ...
    class Component_typeContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def component_type_primary(self): ...
        def SIGNAL_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def component_type(self): ...
    class Component_type_primaryContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ADDRMAP_kw(self): ...
        def REGFILE_kw(self): ...
        def REG_kw(self): ...
        def FIELD_kw(self): ...
        def MEM_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def component_type_primary(self): ...
    class Param_defContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def param_def_elem(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def param_def(self): ...
    class Param_def_elemContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def data_type(self): ...
        def ID(self): ...
        def array_type_suffix(self): ...
        def ASSIGN(self): ...
        def expr(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def param_def_elem(self): ...
    class Param_instContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def param_assignment(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def param_inst(self): ...
    class Param_assignmentContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ID(self): ...
        def expr(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def param_assignment(self): ...
    class ExprContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def getRuleIndex(self): ...
        def copyFrom(self, ctx: ParserRuleContext): ...
    class BinaryExprContext(ExprContext):
        op: Incomplete
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expr(self, i: int = ...): ...
        def EXP(self): ...
        def MULT(self): ...
        def DIV(self): ...
        def MOD(self): ...
        def PLUS(self): ...
        def MINUS(self): ...
        def LSHIFT(self): ...
        def RSHIFT(self): ...
        def LT(self): ...
        def LEQ(self): ...
        def GT(self): ...
        def GEQ(self): ...
        def EQ(self): ...
        def NEQ(self): ...
        def AND(self): ...
        def XOR(self): ...
        def XNOR(self): ...
        def OR(self): ...
        def BAND(self): ...
        def BOR(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class UnaryExprContext(ExprContext):
        op: Incomplete
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expr_primary(self): ...
        def PLUS(self): ...
        def MINUS(self): ...
        def BNOT(self): ...
        def NOT(self): ...
        def AND(self): ...
        def NAND(self): ...
        def OR(self): ...
        def NOR(self): ...
        def XOR(self): ...
        def XNOR(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class NOPContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expr_primary(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class TernaryExprContext(ExprContext):
        op: Incomplete
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expr(self, i: int = ...): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def expr(self, _p: int = ...): ...
    class Expr_primaryContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def literal(self): ...
        def concatenate(self): ...
        def replicate(self): ...
        def paren_expr(self): ...
        def cast(self): ...
        def prop_ref(self): ...
        def instance_ref(self): ...
        def struct_literal(self): ...
        def array_literal(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def expr_primary(self): ...
    class ConcatenateContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def expr(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def concatenate(self): ...
    class ReplicateContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def expr(self): ...
        def concatenate(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def replicate(self): ...
    class Paren_exprContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def expr(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def paren_expr(self): ...
    class CastContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def getRuleIndex(self): ...
        def copyFrom(self, ctx: ParserRuleContext): ...
    class CastWidthContext(CastContext):
        op: Incomplete
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def cast_width_expr(self): ...
        def expr(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class CastTypeContext(CastContext):
        typ: Incomplete
        op: Incomplete
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expr(self): ...
        def BOOLEAN_kw(self): ...
        def BIT_kw(self): ...
        def LONGINT_kw(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def cast(self): ...
    class Cast_width_exprContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def literal(self): ...
        def paren_expr(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def cast_width_expr(self): ...
    class Range_suffixContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def expr(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def range_suffix(self): ...
    class Array_suffixContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def expr(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def array_suffix(self): ...
    class Array_type_suffixContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def array_type_suffix(self): ...
    class Data_typeContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def basic_data_type(self): ...
        def ACCESSTYPE_kw(self): ...
        def ADDRESSINGTYPE_kw(self): ...
        def ONREADTYPE_kw(self): ...
        def ONWRITETYPE_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def data_type(self): ...
    class Basic_data_typeContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def BIT_kw(self): ...
        def LONGINT_kw(self): ...
        def UNSIGNED_kw(self): ...
        def STRING_kw(self): ...
        def BOOLEAN_kw(self): ...
        def ID(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def basic_data_type(self): ...
    class LiteralContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def number(self): ...
        def string_literal(self): ...
        def boolean_literal(self): ...
        def accesstype_literal(self): ...
        def onreadtype_literal(self): ...
        def onwritetype_literal(self): ...
        def addressingtype_literal(self): ...
        def precedencetype_literal(self): ...
        def enum_literal(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def literal(self): ...
    class NumberContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def getRuleIndex(self): ...
        def copyFrom(self, ctx: ParserRuleContext): ...
    class NumberHexContext(NumberContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def HEX_INT(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class NumberVerilogContext(NumberContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def VLOG_INT(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class NumberIntContext(NumberContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def INT(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def number(self): ...
    class String_literalContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def STRING(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def string_literal(self): ...
    class Boolean_literalContext(ParserRuleContext):
        parser: Incomplete
        val: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def TRUE_kw(self): ...
        def FALSE_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def boolean_literal(self): ...
    class Array_literalContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def expr(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def array_literal(self): ...
    class Struct_literalContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ID(self): ...
        def struct_kv(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def struct_literal(self): ...
    class Struct_kvContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ID(self): ...
        def expr(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def struct_kv(self): ...
    class Enum_literalContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ID(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def enum_literal(self): ...
    class Accesstype_literalContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def NA_kw(self): ...
        def RW_kw(self): ...
        def WR_kw(self): ...
        def R_kw(self): ...
        def W_kw(self): ...
        def RW1_kw(self): ...
        def W1_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def accesstype_literal(self): ...
    class Onreadtype_literalContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def RCLR_kw(self): ...
        def RSET_kw(self): ...
        def RUSER_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def onreadtype_literal(self): ...
    class Onwritetype_literalContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def WOSET_kw(self): ...
        def WOCLR_kw(self): ...
        def WOT_kw(self): ...
        def WZS_kw(self): ...
        def WZC_kw(self): ...
        def WZT_kw(self): ...
        def WCLR_kw(self): ...
        def WSET_kw(self): ...
        def WUSER_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def onwritetype_literal(self): ...
    class Addressingtype_literalContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def COMPACT_kw(self): ...
        def REGALIGN_kw(self): ...
        def FULLALIGN_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def addressingtype_literal(self): ...
    class Precedencetype_literalContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def HW_kw(self): ...
        def SW_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def precedencetype_literal(self): ...
    class Instance_refContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def instance_ref_element(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def instance_ref(self): ...
    class Instance_ref_elementContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ID(self): ...
        def array_suffix(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def instance_ref_element(self): ...
    class Prop_refContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def instance_ref(self): ...
        def prop_keyword(self): ...
        def ID(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def prop_ref(self): ...
    class Local_property_assignmentContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def normal_prop_assign(self): ...
        def DEFAULT_kw(self): ...
        def encode_prop_assign(self): ...
        def prop_mod_assign(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def local_property_assignment(self): ...
    class Dynamic_property_assignmentContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def instance_ref(self): ...
        def normal_prop_assign(self): ...
        def encode_prop_assign(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def dynamic_property_assignment(self): ...
    class Normal_prop_assignContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def prop_keyword(self): ...
        def ID(self): ...
        def ASSIGN(self): ...
        def prop_assignment_rhs(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def normal_prop_assign(self): ...
    class Encode_prop_assignContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ENCODE_kw(self): ...
        def ASSIGN(self): ...
        def ID(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def encode_prop_assign(self): ...
    class Prop_mod_assignContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def prop_mod(self): ...
        def ID(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def prop_mod_assign(self): ...
    class Prop_assignment_rhsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def precedencetype_literal(self): ...
        def expr(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def prop_assignment_rhs(self): ...
    class Prop_keywordContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def SW_kw(self): ...
        def HW_kw(self): ...
        def RCLR_kw(self): ...
        def RSET_kw(self): ...
        def WOCLR_kw(self): ...
        def WOSET_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def prop_keyword(self): ...
    class Prop_modContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def POSEDGE_kw(self): ...
        def NEGEDGE_kw(self): ...
        def BOTHEDGE_kw(self): ...
        def LEVEL_kw(self): ...
        def NONSTICKY_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def prop_mod(self): ...
    class Udp_defContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def PROPERTY_kw(self): ...
        def ID(self): ...
        def udp_attr(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def udp_def(self): ...
    class Udp_attrContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def udp_type(self): ...
        def udp_usage(self): ...
        def udp_default(self): ...
        def udp_constraint(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def udp_attr(self): ...
    class Udp_typeContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def TYPE_kw(self): ...
        def ASSIGN(self): ...
        def udp_data_type(self): ...
        def array_type_suffix(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def udp_type(self): ...
    class Udp_data_typeContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def component_type_primary(self): ...
        def REF_kw(self): ...
        def NUMBER_kw(self): ...
        def basic_data_type(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def udp_data_type(self): ...
    class Udp_usageContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def COMPONENT_kw(self): ...
        def ASSIGN(self): ...
        def udp_comp_type(self, i: int = ...): ...
        def OR(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def udp_usage(self): ...
    class Udp_comp_typeContext(ParserRuleContext):
        parser: Incomplete
        kw: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def component_type(self): ...
        def CONSTRAINT_kw(self): ...
        def ALL_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def udp_comp_type(self): ...
    class Udp_defaultContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def DEFAULT_kw(self): ...
        def ASSIGN(self): ...
        def expr(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def udp_default(self): ...
    class Udp_constraintContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def CONSTRAINT_kw(self): ...
        def ASSIGN(self): ...
        def COMPONENTWIDTH_kw(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def udp_constraint(self): ...
    class Enum_defContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ENUM_kw(self): ...
        def ID(self): ...
        def enum_entry(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def enum_def(self): ...
    class Enum_entryContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ID(self): ...
        def ASSIGN(self): ...
        def expr(self): ...
        def enum_prop_assign(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def enum_entry(self): ...
    class Enum_prop_assignContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ID(self): ...
        def ASSIGN(self): ...
        def expr(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def enum_prop_assign(self): ...
    class Struct_defContext(ParserRuleContext):
        parser: Incomplete
        name: Incomplete
        base: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def STRUCT_kw(self): ...
        def ID(self, i: int = ...): ...
        def ABSTRACT_kw(self): ...
        def struct_elem(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def struct_def(self): ...
    class Struct_elemContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def struct_type(self): ...
        def ID(self): ...
        def array_type_suffix(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def struct_elem(self): ...
    class Struct_typeContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def data_type(self): ...
        def component_type(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def struct_type(self): ...
    class Constraint_defContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def constraint_named_def(self): ...
        def constraint_insts(self): ...
        def constraint_anon_def(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constraint_def(self): ...
    class Constraint_named_defContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def CONSTRAINT_kw(self): ...
        def ID(self): ...
        def constraint_body(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constraint_named_def(self): ...
    class Constraint_anon_defContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def CONSTRAINT_kw(self): ...
        def constraint_body(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constraint_anon_def(self): ...
    class Constraint_bodyContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def constraint_body_elem(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constraint_body(self): ...
    class Constraint_body_elemContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def constr_relational(self): ...
        def constr_prop_assign(self): ...
        def constr_inside_values(self): ...
        def constr_inside_enum(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constraint_body_elem(self): ...
    class Constraint_instsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ID(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constraint_insts(self): ...
    class Constr_relationalContext(ParserRuleContext):
        parser: Incomplete
        op: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def expr(self, i: int = ...): ...
        def LT(self): ...
        def LEQ(self): ...
        def GT(self): ...
        def GEQ(self): ...
        def EQ(self): ...
        def NEQ(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constr_relational(self): ...
    class Constr_prop_assignContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def ID(self): ...
        def ASSIGN(self): ...
        def expr(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constr_prop_assign(self): ...
    class Constr_inside_valuesContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def constr_lhs(self): ...
        def INSIDE_kw(self): ...
        def constr_inside_value(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constr_inside_values(self): ...
    class Constr_inside_enumContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def constr_lhs(self): ...
        def INSIDE_kw(self): ...
        def ID(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constr_inside_enum(self): ...
    class Constr_lhsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def THIS_kw(self): ...
        def instance_ref(self): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constr_lhs(self): ...
    class Constr_inside_valueContext(ParserRuleContext):
        parser: Incomplete
        val: Incomplete
        l_val: Incomplete
        r_val: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = ..., invokingState: int = ...) -> None: ...
        def expr(self, i: int = ...): ...
        def getRuleIndex(self): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def constr_inside_value(self): ...
    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int): ...
    def expr_sempred(self, localctx: ExprContext, predIndex: int): ...
